# -*- coding: utf-8 -*-
"""BookSum.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pw4WUWH9xlCRokvwzCiYGUwdpd13FXvS
"""

!pip install datasets

# Commented out IPython magic to ensure Python compatibility.
from datasets import load_dataset
import json
from collections import Counter
import pandas as pd
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

book_data = load_dataset("ubaada/booksum-complete-cleaned", "books")
chapter_data = load_dataset("ubaada/booksum-complete-cleaned", "chapters")


# Print the 1st book
print(book_data["train"][0])

# Print the summary of the 1st book
print(book_data["train"][0]['summary'][0])

"""###First Example:"""

# Print the 1st book
print(f"Book: {book_data['train'][0]['title']}\n")
print(book_data["train"][0]['text'][:500])

# Print the summary of the 1st book
print("\t...\n\nSummary:\n",book_data["train"][0]['summary'][0]['text'])

# Print the 1st book
print(f"Chapter: {chapter_data['train'][0]['book_title']}\n", chapter_data["train"][0]['text'][:500])

# Print the summary of the 1st book
print("\t...\n\nSummary:\n",chapter_data["train"][0]['summary'][0]['text'])

"""###Multiple Summaries"""

#TODO: Multiple summaries
chap_counter = Counter()
max_counter = 0
max_chapter = []
for chapter in chapter_data["train"]:
  chap_counter[len(chapter["summary"])] += 1

  if len(chapter["summary"]) > max_counter:
    max_chapter = chapter
    max_counter = len(chapter["summary"])

print(chap_counter)
print(f"There are {chap_counter.total()-chap_counter[1]} chapters with multiple summaries.\nIn contrast, {chap_counter[1]} chapters have one summary.\n")

for i in range(len(max_chapter["summary"])):
  print(f"Summariy Nr.{i+1}:\n", max_chapter['summary'][i])

#TODO: Multiple summaries
book_counter = Counter()
max_counter = 0
max_book = []
for book in book_data["train"]:
  book_counter[len(book["summary"])] += 1

  if len(book["summary"]) > max_counter:
    max_book = book
    max_counter = len(book["summary"])

print(book_counter)
print(f"There are {book_counter.total()-book_counter[1]} chapters with multiple summaries.\nIn contrast, {book_counter[1]} chapters have one summary.\n")

for i in range(len(max_book["summary"])):
  print(f"Summariy Nr.{i+1}:\n", max_book['summary'][i])

# Plot: Wie ist die Menge der multiplen summaries verteilt?
# Set the width and height of the figure
plt.figure(figsize=(10,6))

# Add title
plt.title("Distribution of multiple summaries for chapters")

# Bar chart showing average arrival delay for Spirit Airlines flights by month
sns.barplot(x=chap_counter.keys(), y=chap_counter.values())

# Add label for vertical axis
plt.ylabel("Number of chapters")
plt.xlabel("Number of summaries")

# Plot: Wie ist die Menge der multiplen summaries verteilt?
# Set the width and height of the figure
plt.figure(figsize=(10,6))

# Add title
plt.title("Distribution of multiple summaries for books")

# Bar chart showing average arrival delay for Spirit Airlines flights by month
sns.barplot(x=book_counter.keys(), y=book_counter.values())

# Add label for vertical axis
plt.ylabel("Number of books")
plt.xlabel("Number of summaries")

"""###Features"""

# Features
print("Book features:\n", book_data["train"][0].keys())
print("Book summary features:\n", book_data["train"][0]["summary"][0].keys())

print("\nChapter features:\n", chapter_data["train"][0].keys())
print("Chapter summary features:\n", chapter_data["train"][0]["summary"][0].keys())

# TODO: What is analysis?
print("Chapter summary:\n", chapter_data["train"][0]["summary"][0]["text"])
print("Chapter analysis:\n", chapter_data["train"][0]["summary"][0]["analysis"])

# Missing Features
kmfoda_data = load_dataset("kmfoda/booksum")

print("Intersected kmfoda chapter features:\n", set(kmfoda_data["train"][0].keys()).intersection(set(chapter_data["train"][0].keys())))
print("Differing kmfoda chapter features:\n", set(kmfoda_data["train"][0].keys()) - set(chapter_data["train"][0].keys()))

summ_dict = json.loads(kmfoda_data["train"][0]["summary"])
print("\nIntersected kmfoda chapter features:\n", set(summ_dict.keys()).intersection(set(chapter_data["train"][0]["summary"][0].keys())))
# name states which chapters are summarized
print("Differing chapter summary features:\n", set(summ_dict.keys())-set(chapter_data["train"][0]["summary"][0].keys()))